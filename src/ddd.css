import React, { useState, useEffect } from "react";
import { collection, getDocs } from "firebase/firestore";
import { db } from "./firebase-config";
import "./Dashboard.css"; // Import CSS for styling

function DoctorDashboard() {
  const [tableData, setTableData] = useState([]);
  const [stats, setStats] = useState({
    newPatients: 0,
    completedAppointments: 0,
    pendingAppointments: 0,
    avgWaitingTime: "0 min",
  });

  const [popupPatient, setPopupPatient] = useState(null);
  const [diagnosisList, setDiagnosisList] = useState([
    "Common Cold",
    "Flu",
    "Back Pain",
    "Migraine",
  ]);
  const [mcYes, setMcYes] = useState(false);
  const [mcDates, setMcDates] = useState({ start: "", end: "" });
  const [mcAmount, setMcAmount] = useState("");

  useEffect(() => {
    const fetchStats = async () => {
      const statsSnapshot = await getDocs(collection(db, "stats"));
      if (!statsSnapshot.empty) {
        const statsData = statsSnapshot.docs[0].data();
        setStats(statsData);
      }
    };

    const fetchTableData = async () => {
      try {
        const queueSnapshot = await getDocs(collection(db, "queue"));
        const employeesSnapshot = await getDocs(collection(db, "employees"));

        const employeesMap = {};
        employeesSnapshot.docs.forEach((doc) => {
          const employeeData = doc.data();
          const employeeId = employeeData.employeeID;

          employeesMap[employeeId] = {
            name: employeeData.name,
            gender: employeeData.gender,
            dateOfBirth: employeeData.dob,
            empId: employeeData.employeeID,
            status: "Pending",
          };
        });

        const patients = queueSnapshot.docs.map((doc) => {
          const queueData = doc.data();
          const employeeId = queueData.employeeID;
          const empData = employeesMap[employeeId] || {};

          return {
            queueNo: queueData.queueNumber || "N/A",
            name: empData.name || "N/A",
            empId: empData.empId || "N/A",
            gender: empData.gender || "N/A",
            age: calculateAge(empData.dateOfBirth),
            status: empData.status,
            timeIn: null,
            timeOut: null,
          };
        });

        setTableData(patients);
      } catch (error) {
        console.error("Error fetching data:", error);
      }
    };

    fetchStats();
    fetchTableData();

    // Set up daily refresh
    const refreshInterval = setInterval(fetchTableData, 24 * 60 * 60 * 1000); // Refresh every 24 hours
    return () => clearInterval(refreshInterval); // Cleanup interval on unmount
  }, []);

  const calculateAge = (dob) => {
    if (!dob) return "N/A";
    const today = new Date();
    const birthDate = new Date(dob);
    let age = today.getFullYear() - birthDate.getFullYear();
    const monthDifference = today.getMonth() - birthDate.getMonth();
    if (
      monthDifference < 0 ||
      (monthDifference === 0 && today.getDate() < birthDate.getDate())
    ) {
      age--;
    }
    return age;
  };

  const handleTimeIn = (index) => {
    const now = new Date().toLocaleTimeString();
    setTableData((prevData) =>
      prevData.map((item, idx) =>
        idx === index ? { ...item, timeIn: now } : item
      )
    );
  };

  const handleTimeOut = (index) => {
    const now = new Date().toLocaleTimeString();
    setTableData((prevData) =>
      prevData.map((item, idx) =>
        idx === index ? { ...item, timeOut: now } : item
      )
    );
  };

  const handleConsultation = (patient) => {
    setPopupPatient(patient);
    setMcYes(false);
    setMcDates({ start: "", end: "" });
    setMcAmount("");
  };

  const closePopup = () => {
    setPopupPatient(null);
  };

  const addDiagnosis = (newDiagnosis) => {
    if (newDiagnosis && !diagnosisList.includes(newDiagnosis)) {
      setDiagnosisList((prev) => [...prev, newDiagnosis]);
    }
  };

  const deleteDiagnosis = (diagnosis) => {
    setDiagnosisList((prev) => prev.filter((item) => item !== diagnosis));
  };

  return (
    <div className="content-wrapper">
      <div className="content-header">
        <div className="container-fluid">
          <h1 className="m-0">Welcome to SKP Clinic Doctor</h1>
        </div>
      </div>

      <section className="content">
        <div className="container-fluid">
          <div className="row">
            <div className="col-lg-3 col-6">
              <div className="small-box bg-info">
                <div className="inner">
                  <h3>{stats.newPatients}</h3>
                  <p>New Patients</p>
                </div>
              </div>
            </div>
            <div className="col-lg-3 col-6">
              <div className="small-box bg-success">
                <div className="inner">
                  <h3>{stats.completedAppointments}</h3>
                  <p>Completed Appointments</p>
                </div>
              </div>
            </div>
            <div className="col-lg-3 col-6">
              <div className="small-box bg-warning">
                <div className="inner">
                  <h3>{stats.pendingAppointments}</h3>
                  <p>Pending Appointments</p>
                </div>
              </div>
            </div>
            <div className="col-lg-3 col-6">
              <div className="small-box bg-secondary">
                <div className="inner">
                  <h3>{stats.avgWaitingTime}</h3>
                  <p>Average Waiting Time</p>
                </div>
              </div>
            </div>
          </div>

          <div className="row mt-4">
            <div className="col-12">
              <div className="card">
                <div className="card-header">
                  <h3 className="card-title">Patient List</h3>
                </div>
                <div className="card-body table-responsive">
                  <table className="table table-hover">
                    <thead>
                      <tr>
                        <th style={{ width: "8%" }}>Queue No.</th>
                        <th style={{ width: "15%" }}>Name</th>
                        <th style={{ width: "10%" }}>Emp ID</th>
                        <th style={{ width: "10%" }}>Gender</th>
                        <th style={{ width: "7%" }}>Age</th>
                        <th style={{ width: "10%" }}>Status</th>
                        <th style={{ width: "30%" }}>Actions</th>
                      </tr>
                    </thead>
                    <tbody>
                      {tableData.map((row, index) => (
                        <tr key={index}>
                          <td>{row.queueNo}</td>
                          <td>{row.name}</td>
                          <td>{row.empId}</td>
                          <td>{row.gender}</td>
                          <td>{row.age}</td>
                          <td>
                            <select
                              value={row.status}
                              onChange={(e) =>
                                setTableData((prevData) =>
                                  prevData.map((item, idx) =>
                                    idx === index
                                      ? { ...item, status: e.target.value }
                                      : item
                                  )
                                )
                              }
                            >
                              <option value="Pending">Pending</option>
                              <option value="Consulted">Consulted</option>
                              <option value="Completed">Completed</option>
                            </select>
                          </td>
                          <td>
                            <button
                              className="btn btn-info btn-sm"
                              onClick={() => handleTimeIn(index)}
                            >
                              Time In
                            </button>
                            <button
                              className="btn btn-secondary btn-sm mx-2"
                              onClick={() => handleTimeOut(index)}
                            >
                              Time Out
                            </button>
                            <button
                              className="btn btn-primary btn-sm"
                              onClick={() => handleConsultation(row)}
                            >
                              Consult
                            </button>
                          </td>
                        </tr>
                      ))}
                    </tbody>
                  </table>
                </div>
              </div>
            </div>
          </div>
        </div>
      </section>

      {popupPatient && (
        <div className="popup">
          <div className="popup-content">
            <h3>Consultation</h3>
            <p>
              You are consulting with: <strong>{popupPatient.name}</strong>
            </p>

            <div>
              <label>Diagnosis:</label>
              <select>
                {diagnosisList.map((diag, index) => (
                  <option key={index}>{diag}</option>
                ))}
              </select>
              <button
                onClick={() =>
                  addDiagnosis(prompt("Enter new diagnosis:"))
                }
              >
                Add
              </button>
              <button
                onClick={() =>
                  deleteDiagnosis(prompt("Enter diagnosis to delete:"))
                }
              >
                Delete
              </button>
            </div>

            <div>
              <label>Additional Notes:</label>
              <textarea
                rows="3"
                style={{ width: "100%" }}
                placeholder="Enter any notes here..."
              />
            </div>

            <div>
              <label>MC:</label>
              <button onClick={() => setMcYes(true)}>Yes</button>
              <button onClick={() => setMcYes(false)}>No</button>
            </div>

            {mcYes && (
              <div>
                <label>Start Date:</label>
                <input
                  type="date"
                  value={mcDates.start}
                  onChange={(e) =>
                    setMcDates((prev) => ({ ...prev, start: e.target.value }))
                  }
                />
                <label>End Date:</label>
                <input
                  type="date"
                  value={mcDates.end}
                  onChange={(e) =>
                    setMcDates((prev) => ({ ...prev, end: e.target.value }))
                  }
                />
                <label>Amount:</label>
                <input
                  type="number"
                  value={mcAmount}
                  onChange={(e) => setMcAmount(e.target.value)}
                />
              </div>
            )}

            <button className="btn btn-secondary" onClick={closePopup}>
              Close
            </button>
          </div>
        </div>
      )}
    </div>
  );
}

export default DoctorDashboard;
